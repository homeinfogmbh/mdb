#! /usr/bin/env python3
"""crmgr

CRM database manager

Usage:
    crmgr find country <pattern> [options]
    crmgr find state <pattern> [options]
    crmgr find address <pattern> [options]
    crmgr find company <pattern> [options]
    crmgr find department <pattern> [options]
    crmgr find employee <pattern> [options]
    crmgr find customer <pattern> [options]
    crmgr add country <iso> <name> [--original-name=<name>]
    crmgr add state <country> <iso> <name>
    crmgr add address <street> <house_number> <zip_code> <city> \
[--state=<state>]
    crmgr add po-box <po_box> <city> [--state=<state>]
    crmgr add company <name> [--address=<address>] [--annotation=<annotation>]
    crmgr add department <name> [--type=<type>]
    crmgr add employee <company> <department> <surname> <phone> \
[--fist-name=<name>] [--cellphone=<cellphone>] [--email=<email>] \
[--alt-phone=<phone>] [--fax=<fax>] [--address=<address>]
    crmgr add customer <company> [--annotation=<annotation>]

Options:
    --help          Prints this page.
    --all           Prints complete data of search target.
"""
from sys import stderr

from peewee import DoesNotExist

from homeinfo.crm import Country, State, Address, Company, Customer

__all__ = [
    'error',
    'PrintMode',
    'find',
    'mprint']


def error(*args, **kwargs):
    """Prints errors to stderr"""

    print(*args, file=stderr, **kwargs)


class PrintMode():
    """Model printing modes"""

    ID = 'id'
    STR = 'str'
    REPR = 'repr'


def find(model, pattern):
    """Find model matching pattern"""

    if model is Country:
        for country in model:
            if (pattern in country.iso.lower() or
                    pattern in country.name.lower() or
                    pattern in country.original_name.lower()):
                yield country
    elif model is State:
        try:
            country = int(pattern)
        except ValueError:
            country = None

        if country is None:
            if len(pattern == 2):
                for state in model:
                    if state.iso == pattern:
                        yield state
            else:
                for state in model:
                    if state.name.lower() == pattern:
                        yield state
        else:
            for state in model.select().where(model.country == country):
                yield state
    elif model is Customer:
        try:
            cid = int(pattern)
        except ValueError:
            cid = None

        if cid is None:
            for customer in Customer:
                if pattern in customer.name.lower():
                    yield (PrintMode.ID, customer)
        else:
            try:
                customer = Customer.get(Customer.id == cid)
            except DoesNotExist:
                error('No customer for CID', cid)
            else:
                yield (PrintMode.STR, customer)
    else:
        raise NotImplementedError()


def mprint(model, mode=PrintMode.ID):
    """Prints the respective model instance"""

    if mode is PrintMode.ID:
        print(model.id)
    elif mode is PrintMode.STR:
        print(str(model))
    elif mode is PrintMode.REPR:
        print(repr(model))
    else:
        raise ValueError('Invalid model printing mode: {}'.format(mode))


if __name__ == '__main__':
    from docopt import docopt

    options = docopt(__doc__)

    all = options['--all']

    if options['find']:
        pattern = options['<pattern>']
        pattern_lower = pattern.lower()

        if options['country']:
            for country in find(Country, pattern_lower):
                mprint(country)
        elif options['state']:
            for state in find(State, pattern_lower):
                mprint(state)
        elif options['customer']:
            for mode, customer in find(Customer, pattern_lower):
                mprint(customer, mode=mode)
        else:
            raise NotImplementedError()
    else:
        raise NotImplementedError()

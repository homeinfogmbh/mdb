#! /usr/bin/env python3
"""mdbmgr.

    Master database manager.

Usage:
    mdbmgr find <pattern> [options]
    mdbmgr add country <iso> <name> [--original-name=<name>]
    mdbmgr add state <country> <iso> <name>
    mdbmgr add address <street> <house_number> <zip_code> <city> \
[--state-id=<state>]
    mdbmgr add po-box <po_box> <city> [--state-id=<state>]
    mdbmgr add company <name> [--address-id=<address>] \
[--annotation=<annotation>]
    mdbmgr add department <name> [--type=<type>]
    mdbmgr add employee <company> <department> <surname> <phone> \
[--fist-name=<name>] [--cellphone=<cellphone>] [--email=<email>] \
[--alt-phone=<phone>] [--fax=<fax>] [--address-id=<address>]
    mdbmgr add customer <company> [--annotation=<annotation>]

Options:
    --customer, -C          Find customers.
    --company, -O           Find companies.
    --department, -D        Find departments.
    --employee, -E          Find employees.
    --address, -A           Find addresses.
    --country, -N           Find countries.
    --state, -S             Find states.
    --name, -n              Prints name of search target instead of ID.
    --state-id=<state>      Specifies the state ID to set.
    --address-id=<address>  Specifies the address ID to set.
    --help , -h             Prints this page.
"""
from sys import stdout, stderr, exit as exit_

from docopt import docopt

from mdb import Country, State, Address, Company, Department, Employee, \
    Customer


def find(options):
    """Find model matching pattern."""

    pattern = options['<pattern>']

    if options['--customer']:
        yield from Customer.find(pattern)

    if options['--company']:
        yield from Company.find(pattern)

    if options['--department']:
        yield from Department.find(pattern)

    if options['--employee']:
        yield from Employee.find(pattern)

    if options['--address']:
        yield from Address.find(pattern)

    if options['--country']:
        yield from Country.find(pattern)

    if options['--state']:
        yield from State.find(pattern)


def print_model(model, print_name):
    """Prints the respective model instance."""

    print(repr(model), file=stderr if print_name else stdout, flush=True)
    print(str(model), file=stdout if print_name else stderr, flush=True)


def main(options):
    """Runs the crmgr."""

    if options['find']:
        for model in find(options):
            print_model(model, options['--name'])
    else:
        print('Operation currently not implemented.', file=stderr, flush=True)
        exit_(3)


if __name__ == '__main__':
    main(docopt(__doc__))
